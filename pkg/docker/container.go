package docker

import (
	"context"
	"io"

	"github.com/docker/docker/api/types"
)

// Containers get containers
func (d *Docker) Containers(opt types.ContainerListOptions) ([]types.Container, error) {
	return d.ContainerList(context.TODO(), opt)
}

// InspectContainer inspect container
func (d *Docker) InspectContainer(name string) (types.ContainerJSON, error) {
	container, _, err := d.ContainerInspectWithRaw(context.TODO(), name, false)
	return container, err
}

// RemoveContainer remove container
func (d *Docker) RemoveContainer(name string) error {
	return d.ContainerRemove(context.TODO(), name, types.ContainerRemoveOptions{})
}

// StartContainer start container with id
func (d *Docker) StartContainer(id string) error {
	return d.ContainerStart(context.TODO(), id, types.ContainerStartOptions{})
}

// StopContainer stop container with id
func (d *Docker) StopContainer(id string) error {
	return d.ContainerStop(context.TODO(), id, nil)
}

// TailContainerLogStream returns the logs generated by a container in an io.ReadCloser.
func (d *Docker) TailContainerLogStream(name string, tail string) (io.ReadCloser, error) {
	options := types.ContainerLogsOptions{
		ShowStdout: true,
		ShowStderr: true,
		Since:      "",
		Until:      "",
		Timestamps: false,
		Follow:     true,
		Tail:       tail,
		Details:    false,
	}

	ctx := context.Background()
	reader, err := d.ContainerLogs(ctx, name, options)
	if err != nil {
		return nil, err
	}

	return reader, nil
}

// ContainerStatsStream returns the stats in an io.ReadCloser
func (d *Docker) ContainerStatsStream(name string) (io.ReadCloser, error) {
	stats, err := d.ContainerStats(context.TODO(), name, true)

	if err != nil {
		return nil, err
	}

	return stats.Body, nil
}
